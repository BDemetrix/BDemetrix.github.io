"use strict";
class BecksAlarmScale {
    constructor() {
        this.errCSS = "color: red; border: 2px solid red; font-weight: bold;", this.init()
    }
    init() {
        this.el = document.querySelector(".js-psy-test-body"), this.el ? (this.groups = this.el.querySelectorAll(".js-psy-test-group"), this.groups.length || this._errorMsg(".js-psy-test-group")) : this._errorMsg(".js-psy-test-body")
    }
    calc() {
        let t = 0;
        const e = {},
            s = this.groups.length;
        for (let r = 0; r < s; r++) {
            const s = this.groups[r],
                i = Array.from(s.querySelectorAll(".js-psy-test-input"));
            if (!i.length) throw this._errorMsg(".js-psy-test-input"), "Некорректная HTML структура теста BecksAlarmScale";
            i.find((t => t.checked)) || (s.classList.add("_error"), e.error = "Не выбран ответ в группе"), e.error || i.forEach((e => {
                e.checked ? (t += +e.value, e.setAttribute("checked", !0)) : e.setAttribute("disabled", !0)
            }))
        }
        return e.error ? (e.errTarget = this.el.querySelector(".js-psy-test-group._error"), e) : (t > 36 ? (e.modifier = "red", e.html = `Потенциально опасный уровень беспокойства и&nbsp;тревоги <div class="psy-test__info-count">Набранных баллов: ${t} </div>`) : t > 22 ? (e.modifier = "yellow", e.html = `Cредняя тревожность <div class="psy-test__info-count">Набранных баллов: ${t} </div>`) : (e.modifier = "green", e.html = `Низкая тревожность <div class="psy-test__info-count">Набранных баллов: ${t}</div> `), e)
    }
    _errorMsg(t = "") {
        console.log(`%c Не найден селектор "${t}" `, this.errCSS), alert("К сожалению тест сломался. Сообщите об этом владельцу сайта, пожалуйста!")
    }
}
class PsyTestsManager {
    constructor(t) {
        this.handler = t, this.errCSS = "color: red; border: 2px solid red; font-weight: bold;", this.init()
    }
    init() {
        if (this.el = document.querySelector(".js-psy-test"), this.el) {
            if (this.testName = this.el.getAttribute("data-test-name"), this.testName || this._errorMsg('Не задано имя теста в data атрибуте блока ".js-psy-test"'), "object" != typeof this.handler) return this._errorMsg(`Ошибка класса обработчика теста: ${this.testName}. Класс не найден.`), void console.log(e);
            this.inputs = this.el.querySelectorAll(".js-psy-test-input"), this.calcBtn = this.el.querySelector(".js-psy-test-btn-calc"), this.resultContainer = this.el.querySelector(".js-psy-test-result"), this.saveBtn = this.el.querySelector(".js-psy-test-btn-save"), this.againBtn = this.el.querySelector(".js-psy-test-btn-again");
            for (let t in this)
                if (!this[t]) return void this._errorMsg(`Ошибка инициализации PsyTestsManager. Не задано поле: ${t}`);
            this.style = document.querySelector(".js-psy-test-style"), this.againBtn.href = location.href, this.calcBtn.addEventListener("click", (() => {
                this._calc()
            })), this.saveBtn.addEventListener("click", (() => {
                this._save()
            })), this.inputs.forEach((t => t.addEventListener("change", (() => {
                const e = t.closest(".js-psy-test-group._error");
                e && (e.classList.remove("_error"), setTimeout((() => {
                    const t = this.el.querySelector(".js-psy-test-group._error,  .js-psy-test-footer");
                    t && t.scrollIntoView(!0)
                }), 10))
            }))))
        } else this._errorMsg('%c Не найден селектор ".js-psy-test" ')
    }
    _calc() {
        let t = {};
        try {
            t = this.handler.calc()
        } catch (t) {
            return this._errorMsg(`Ошибка вычисления теста ${this.testName}`), console.log(t), !1
        }
        if (t.error) return t.errTarget && t.errTarget.scrollIntoView(!0), !1;
        if (!t.modifier || !t.html) throw this._errorMsg(), ` Ошибка вычисления результата теста ${this.testName}. `;
        this.calcBtn.remove(), this.resultContainer.innerHTML = t.html, this.resultContainer.classList.add(`psy-test__info--${t.modifier}`), this.resultContainer.classList.remove("_hidden"), this.againBtn.classList.remove("_hidden"), this.saveBtn.classList.remove("_hidden"), this.againBtn.href = location.href
    }
    _save() {
        if (this.saveBtn.remove(), !this.style) return alert("К сожалению невозможно сохранить тест. \n\nСообщите об этом владельцу сайта, пожалуйста!"), void console.log("%c Не найдены стили для сохранения ", this.errCSS);
        this.style.className = "";
        let t = this.el.getAttribute("data-test-link");
        const e = this.againBtn.href;
        this.againBtn.href = t || location.origin;
        let s = ` <!DOCTYPE html>\n\t\t\t\t\t<html lang="ru">\n\t\t\t\t\t\t<head>\n\t\t\t\t\t\t\t\x3c!-- WEB-разработчик данного теста - Дмитрий Богданов https://bdemetrix.github.io --\x3e\n\t\t\t\t\t\t\t<title>@@title</title>\n\t\t\t\t\t\t\t<meta charset="UTF-8">\n\t\t\t\t\t\t\t<meta name="format-detection" content="telephone=no">\n\t\t\t\t\t\t\t<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">\n\t\t\t\t\t\t\t${this.style.outerHTML}\n\t\t\t\t\t\t</head>\n\t\t\t\t\t\t<body>\n\t\t\t\t\t\t\t${this.el.outerHTML}\n\n\t\t\t\t\t\t\t<scr`;
        s += "ipt>\n\t\t\t\tdocument.getElementById('psy-test-result').scrollIntoView(true);\n\t\t\t\t</scr", s += "ipt>\n\t\t\t\t\t\t</body>\n\t\t\t\t\t</html>", this.againBtn.href = e;
        let r = this.el.getAttribute("data-test-file-name") ?? "Test.";
        r = `${r} от ${this._getDate()}.html`;
        const i = new Blob([s], {
                type: "text/plain"
            }),
            o = document.createElement("a");
        o.setAttribute("href", URL.createObjectURL(i)), o.setAttribute("download", r), o.click()
    }
    _getDate() {
        const t = new Date,
            e = t.getFullYear();
        let s = t.getMonth() + 1;
        s = s < 10 ? "0" + s : s;
        const r = t.getDate();
        r = r < 10 ? "0" + r : r;
        let i = t.getHours();
        i = i < 10 ? "0" + i : i;
        const o = t.getMinutes();
        o = o < 10 ? "0" + o : o;
        const n = t.getSeconds();
        return n = n < 10 ? "0" + n : n, `${r}.${s}.${e} ${i}.${o}.${n}`
    }
    _errorMsg(t) {
        console.log(`%c ${t} `, this.errCSS), alert("К сожалению тест сломался. \n\nСообщите об этом владельцу сайта, пожалуйста!")
    }
}